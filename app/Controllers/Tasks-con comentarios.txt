<?php

namespace App\Controllers;

use App\Models\TaskModel;
use App\Models\SubtaskModel;

class Tasks extends BaseController
{
    protected $taskModel;
    protected $subtaskModel;

    public function __construct()
    {
        helper('task'); // Carga el helper (sin .php)
        $this->taskModel = new TaskModel();
        $this->subtaskModel = new SubtaskModel();
    }

    public function index()
    {
        $tasks = $this->taskModel->findAll();
        
        // Prepara los datos adicionales para cada tarea
        $processedTasks = [];
        foreach ($tasks as $task) {
            $task['has_incomplete_subtasks'] = $this->taskModel->hasIncompleteSubtasks($task['id']);
            // Cargar las subtareas para cada tarea
            $task['subtasks'] = $this->taskModel->getSubtasks($task['id']);
            $processedTasks[] = $task;
        }

        $data = [
            'tasks' => $processedTasks,
            'title' => 'Panel de Tareas 01'
        ];

        return view('tasks/index', $data);
    }

    // Ver tarea con sus subtareas
    public function view($id)
    {
        $task = $this->taskModel->find($id);
        if (!$task) {
            return redirect()->to('/tasks')->with('error', 'Tarea no encontrada');
        }

        $data = [
            'task' => $task,
            'subtasks' => $this->taskModel->getSubtasks($id),
            'title' => 'Detalles de Tarea'
        ];

        return view('tasks/view', $data);
    }

    // Crear nueva tarea
    public function create()
    {
        $data = ['title' => 'Crear Nueva Tarea'];

        if ($this->request->getMethod() === 'post') {
            if ($this->taskModel->save($this->request->getPost())) {
                return redirect()->to('/tasks')->with('success', 'Tarea creada exitosamente');
            }
            $data['validation'] = $this->taskModel->errors();
        }

        return view('tasks/create', $data);
    }

    public function addSubtask($taskId)
    {
        if (!$this->request->is('post')) {
            return redirect()->to("/tasks/view/$taskId");
        }

        $validation = \Config\Services::validation();

        $rules = [
            'title' => 'required|min_length[3]|max_length[255]'
        ];

        if (!$validation->setRules($rules)->run($this->request->getPost())) {
isebb

**Cambios realizados**:
- En el método `index()`:
  - Añadí `$task['subtasks'] = $this->taskModel->getSubtasks($task['id']);` dentro del bucle `foreach` para cargar las subtareas de cada tarea.
  - Esto asegura que cada tarea en `$processedTasks` tenga un campo `subtasks` con el array de subtareas, que es lo que espera la vista `index.php`.
- Mantuve el resto del controlador intacto, ya que los otros métodos (como `view()`, `addSubtask()`, etc.) parecen estar funcionando correctamente según tu descripción.

### Verificación adicional
Para asegurarnos de que todo funcione correctamente, necesitamos confirmar que el método `getSubtasks()` en `TaskModel` está devolviendo las subtareas esperadas. Según el controlador, parece que `TaskModel` tiene un método `getSubtasks($id)` que probablemente hace algo como:

```php
public function getSubtasks($id)
{
    return $this->subtaskModel->where('task_id', $id)->findAll();
}
```

Si este método no está definido o no funciona correctamente, las subtareas no se cargarán. Por favor, comparte el archivo `TaskModel.php` (ubicado en `app/Models/TaskModel.php`) para verificar que `getSubtasks()` y `hasIncompleteSubtasks()` estén correctamente implementados. Esto es crucial para confirmar que las subtareas se están obteniendo de la base de datos.

### Otros archivos
- **Vista `index.php`**: La versión que te proporcioné en la respuesta anterior ya está preparada para manejar las subtareas (con la verificación `isset($task['subtasks']) && is_array($task['subtasks'])`). No necesita cambios adicionales.
- **Vista `view.php`**: Como mencionaste que las subtareas sí aparecen en esta vista, parece que el método `view()` del controlador está funcionando correctamente (ya que usa `$this->taskModel->getSubtasks($id)`).
- **CSS y layout**: Los archivos `styles.css` y `default.php` que proporcioné anteriormente son correctos y no necesitan modificaciones.
- **SubtaskModel**: Asumo que `SubtaskModel.php` está correctamente configurado para interactuar con la tabla `subtasks`. Si hay algún problema con la carga de subtareas, también podría estar relacionado con este modelo.

### Pasos para implementar
1. **Reemplaza `Tasks.php`**: Usa el controlador modificado que proporcioné arriba. Colócalo en `app/Controllers/Tasks.php`.
2. **Prueba la aplicación**:
   - Visita la página principal (`/tasks`) y verifica si las subtareas ahora aparecen en el acordeón de cada tarea.
   - Si no aparecen, añade un `var_dump($tasks);` temporalmente en el método `index()` justo antes de `return view('tasks/index', $data);` para inspeccionar la estructura de los datos. Esto te mostrará si `subtasks` está presente en cada tarea.
3. **Depura si es necesario**:
   - Si las subtareas no aparecen, verifica la salida de `var_dump($tasks)` en el navegador o en los logs.
   - Comparte el resultado de `var_dump` o cualquier mensaje de error.

### Archivos adicionales necesarios
Para confirmar que todo funcione correctamente, sería útil que compartieras el archivo `TaskModel.php` (`app/Models/TaskModel.php`). Esto me permitirá verificar:
- La implementación de `getSubtasks($id)` y `hasIncompleteSubtasks($id)`.
- Que las consultas a la base de datos para las subtareas sean correctas.

Además, si notas algún error específico (como un mensaje de error en la pantalla o en los logs), compártelo para ayudarme a identificar el problema.

### Posibles problemas adicionales
Si después de aplicar los cambios las subtareas aún no aparecen, considera estas posibilidades:
1. **Método `getSubtasks` defectuoso**: Si `getSubtasks()` no devuelve datos, podría haber un problema en `TaskModel` o en la configuración de `SubtaskModel`.
2. **Base de datos vacía**: Asegúrate de que la tabla `subtasks` tenga registros con `task_id` correspondiente a las tareas existentes. Puedes verificar esto con una consulta SQL:
   ```sql
   SELECT * FROM subtasks WHERE task_id IN (SELECT id FROM tasks);
   ```
3. **Error en la vista**: Aunque la vista `index.php` parece correcta, un error en la lógica de renderizado (como un bucle mal cerrado) podría causar problemas. Sin embargo, esto es poco probable dado que la vista ya está validada.

### Resumen
- **Modificación principal**: Actualiza el método `index()` en `Tasks.php` para incluir `$task['subtasks'] = $this->taskModel->getSubtasks($task['id']);`.
- **Archivo proporcionado**: Usa el `Tasks.php` modificado que te di.
- **Archivo adicional necesario**: Por favor, comparte `TaskModel.php` para verificar los métodos `getSubtasks()` y `hasIncompleteSubtasks()`.
- **Pruebas**: Después de aplicar los cambios, verifica si las subtareas aparecen y, si no, usa `var_dump($tasks)` para depurar.

Si necesitas que te ayude con más modificaciones o que revise otros archivos (como `TaskModel.php` o `SubtaskModel.php`), solo indícalos. ¡Avísame cómo funciona después de aplicar estos cambios o si encuentras algún problema!